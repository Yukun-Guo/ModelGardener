name: Auto Version Bump

on:
  push:
    branches:
      - main
    paths-ignore:
      - '.github/**'
      - 'docs/**'
      - '*.md'
      - 'pyproject.toml'  # Prevent infinite loop when we update the version

jobs:
  version-bump:
    runs-on: ubuntu-latest
    
    # Only run if the push is not from the GitHub Actions bot
    if: github.actor != 'github-actions[bot]'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install toml
    
    - name: Get current version and increment
      id: version
      run: |
        python << 'EOF'
        import toml
        import re
        
        # Read the current pyproject.toml
        with open('pyproject.toml', 'r') as f:
            data = toml.load(f)
        
        current_version = data['project']['version']
        print(f"Current version: {current_version}")
        
        # Parse version (assuming semantic versioning: major.minor.patch)
        version_parts = current_version.split('.')
        
        # Increment patch version
        if len(version_parts) >= 3:
            version_parts[2] = str(int(version_parts[2]) + 1)
        elif len(version_parts) == 2:
            # If only major.minor, add patch and increment it
            version_parts.append('1')
        else:
            # If only major, make it major.0.1
            version_parts.extend(['0', '1'])
        
        new_version = '.'.join(version_parts)
        print(f"New version: {new_version}")
        
        # Update the version in pyproject.toml
        data['project']['version'] = new_version
        
        with open('pyproject.toml', 'w') as f:
            toml.dump(data, f)
        
        # Set output for next steps
        with open('version_info.txt', 'w') as f:
            f.write(f"current={current_version}\n")
            f.write(f"new={new_version}\n")
        EOF
        
        # Read the version info
        current_version=$(grep "current=" version_info.txt | cut -d'=' -f2)
        new_version=$(grep "new=" version_info.txt | cut -d'=' -f2)
        
        echo "current_version=$current_version" >> $GITHUB_OUTPUT
        echo "new_version=$new_version" >> $GITHUB_OUTPUT
    
    - name: Configure git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
    
    - name: Commit version bump
      run: |
        git add pyproject.toml
        git commit -m "ðŸš€ Bump version from ${{ steps.version.outputs.current_version }} to ${{ steps.version.outputs.new_version }}"
    
    - name: Create and push tag
      run: |
        git tag "v${{ steps.version.outputs.new_version }}"
        git push origin main
        git push origin "v${{ steps.version.outputs.new_version }}"
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: "v${{ steps.version.outputs.new_version }}"
        release_name: "Release v${{ steps.version.outputs.new_version }}"
        body: |
          ## What's Changed
          Auto-generated release for version ${{ steps.version.outputs.new_version }}
          
          **Previous version:** ${{ steps.version.outputs.current_version }}
          **New version:** ${{ steps.version.outputs.new_version }}
          
          This release was automatically created when code was pushed to the main branch.
        draft: false
        prerelease: false
