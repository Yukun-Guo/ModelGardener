#!/usr/bin/env python3
"""
Demo CIFAR-10 Workflow - End-to-end demonstration of the updated CLI
This script shows how the CLI now defaults to CIFAR-10 instead of sample images
"""
import os
import tempfile
import subprocess
import yaml
import numpy as np

def demo_cifar10_workflow():
    """Demonstrate the complete CIFAR-10 workflow"""
    print("üöÄ CIFAR-10 Workflow Demo")
    print("=" * 60)
    
    # Create temporary directory  
    with tempfile.TemporaryDirectory() as temp_dir:
        print(f"üìÅ Working in: {temp_dir}")
        
        # Change to temp directory
        original_dir = os.getcwd()
        os.chdir(temp_dir)
        
        try:
            # 1. Generate CIFAR-10 project template using CLI
            print("\n1. Creating CIFAR-10 project template...")
            template_path = os.path.join(temp_dir, "cifar10_demo.yaml")
            
            # Use Python to create template
            from cli_config import ModelConfigCLI
            cli = ModelConfigCLI()
            cli.create_template(template_path)
            
            print(f"‚úÖ Configuration: {template_path}")
            
            # 2. Verify CIFAR-10 data was copied
            data_path = os.path.join(temp_dir, "data", "cifar10.npz")
            if os.path.exists(data_path):
                print(f"‚úÖ CIFAR-10 data: {data_path}")
                
                data = np.load(data_path)
                print(f"   üìä Images: {data['x'].shape}")
                print(f"   üè∑Ô∏è  Labels: {data['y'].shape}")
                print(f"   üìà Classes: {len(np.unique(data['y']))}")
            else:
                print("‚ÑπÔ∏è  CIFAR-10 data will be copied when generating scripts")
            
            # 3. Check if scripts were already generated by create_template
            print("\n2. Checking generated files...")
            
            # The create_template method already generates scripts, so let's check them
            train_file = os.path.join(temp_dir, "train.py")
            config_file = os.path.join(temp_dir, "cifar10_demo.yaml")
            
            if os.path.exists(train_file):
                print("   ‚úÖ Scripts already generated by create_template")
            else:
                print("   ‚ÑπÔ∏è  Generating additional scripts...")
                # If needed, generate scripts here
            
            # 4. List generated files
            print("\n3. Generated project structure:")
            for root, dirs, files in os.walk(temp_dir):
                # Skip __pycache__ directories
                dirs[:] = [d for d in dirs if d != '__pycache__']
                
                level = root.replace(temp_dir, '').count(os.sep)
                indent = ' ' * 2 * level
                rel_path = os.path.relpath(root, temp_dir)
                if rel_path == '.':
                    print("./")
                else:
                    print(f"{indent}{os.path.basename(root)}/")
                    
                subindent = ' ' * 2 * (level + 1)
                for file in files:
                    if not file.endswith('.pyc'):
                        print(f"{subindent}{file}")
            
            # 5. Show key configuration settings
            print("\n4. Key CIFAR-10 settings in config:")
            with open(template_path, 'r') as f:
                config = yaml.safe_load(f)
            
            print(f"   üîß Data loader: {config['data']['data_loader']}")
            print(f"   üìê Input shape: {config['model']['input_shape']}")
            print(f"   üéØ Classes: {config['model']['num_classes']}")
            print(f"   üìÅ Data path: {config['data']['train_dir']}")
            
            # 6. Show model architecture preview
            print("\n5. Model architecture preview:")
            model_file = os.path.join(temp_dir, "custom_modules", "custom_models.py")
            if os.path.exists(model_file):
                with open(model_file, 'r') as f:
                    content = f.read()
                    if "input_shape=(32, 32, 3)" in content and "Dense(10" in content:
                        print("   ‚úÖ CIFAR-10 optimized CNN (32x32x3 ‚Üí 10 classes)")
                        print("   ‚úÖ BatchNormalization layers included")
                        print("   ‚úÖ Proper layer sizing for small images")
                    else:
                        print("   ‚ÑπÔ∏è  Model file generated (check for CIFAR-10 settings)")
            
            # 7. Verify CIFAR-10 data exists after script generation
            data_path_final = os.path.join(temp_dir, "data", "cifar10.npz")
            if os.path.exists(data_path_final):
                print("\n6. Final verification:")
                print("   ‚úÖ CIFAR-10 data copied successfully")
                data = np.load(data_path_final)
                print(f"   ‚úÖ Dataset: {data['x'].shape[0]} samples, {data['x'].shape[1:]} shape")
            
        finally:
            os.chdir(original_dir)
        
        print("\nüéâ Demo complete! The CLI now generates CIFAR-10 projects by default.")
        print("üí° No more sample JPG images - real dataset from the start!")

if __name__ == "__main__":
    demo_cifar10_workflow()
