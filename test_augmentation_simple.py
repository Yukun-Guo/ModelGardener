#!/usr/bin/env python3
"""
Simple test to validate the augmentation configuration structure.
"""

def test_augmentation_config():
    """Test the augmentation configuration structure."""
    
    # Test configuration structure
    print("Testing Augmentation Configuration Structure")
    print("=" * 50)
    
    # Sample configuration that would be generated by our system
    augmentation_config = {
        'Horizontal Flip': {
            'enabled': True,
            'probability': 0.5
        },
        'Vertical Flip': {
            'enabled': False,
            'probability': 0.5
        },
        'Rotation': {
            'enabled': False,
            'angle_range': 15.0,
            'probability': 0.5
        },
        'Gaussian Noise': {
            'enabled': False,
            'variance_limit': 0.01,
            'probability': 0.2
        },
        'Brightness Adjustment': {
            'enabled': False,
            'brightness_limit': 0.2,
            'probability': 0.5
        },
        'Color Jittering': {
            'enabled': True,
            'hue_shift_limit': 20,
            'sat_shift_limit': 30,
            'val_shift_limit': 20,
            'probability': 0.5
        },
        'Random Cropping': {
            'enabled': True,
            'crop_area_min': 0.08,
            'crop_area_max': 1.0,
            'aspect_ratio_min': 0.75,
            'aspect_ratio_max': 1.33,
            'probability': 1.0
        },
        'Custom Rotation 1': {
            'enabled': True,
            'min_angle': -30.0,
            'max_angle': 30.0,
            'probability': 0.3
        }
    }
    
    # Display configuration
    for method, params in augmentation_config.items():
        enabled = params.get('enabled', False)
        status = "✓ ENABLED" if enabled else "✗ DISABLED"
        print(f"\n{method} [{status}]:")
        
        for param_name, value in params.items():
            if param_name != 'enabled':
                print(f"  {param_name}: {value}")
    
    print("\n" + "=" * 50)
    print("Configuration structure is valid!")
    
    # Test mapping to legacy format for TensorFlow
    print("\nMapping to TensorFlow configuration:")
    print("-" * 30)
    
    # Horizontal flip mapping
    hflip = augmentation_config.get('Horizontal Flip', {})
    tf_hflip = hflip.get('enabled', False)
    print(f"aug_rand_hflip: {tf_hflip}")
    
    # Random cropping mapping
    crop = augmentation_config.get('Random Cropping', {})
    tf_crop = crop.get('enabled', False)
    crop_range = [crop.get('crop_area_min', 0.08), crop.get('crop_area_max', 1.0)]
    print(f"aug_crop: {tf_crop}")
    print(f"crop_area_range: {crop_range}")
    
    # Color jitter mapping
    color_jitter = augmentation_config.get('Color Jittering', {})
    if color_jitter.get('enabled', False):
        hue_strength = color_jitter.get('hue_shift_limit', 20) / 50.0  # Normalize
        print(f"color_jitter: {hue_strength}")
    else:
        print("color_jitter: 0.0")
    
    print("\nTest completed successfully!")

if __name__ == "__main__":
    test_augmentation_config()
